name: 'Terraform Format and Validate'

on:
  push:
    branches:
      - main
    
permissions:
  contents: read # for actions/checkout to fetch code
  
jobs:
  terraform-unit-tests:
    name: 'Terraform Format and Validate'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

    runs-on: ubuntu-latest
    strategy:
      matrix:
        working-directory: ['azure-ad-connect', 'azure-file-sync', 'azure-kubernetes-service', 'azure-netapp-files', 'azure-network-manager', 'azure-private-dns-resolver', 'azure-route-server', 'azure-virtual-desktop', 'azure-virtual-wan', 'bgp-enabled-network', 'core-environment-lab', 'global-load-balancer', 'vm-active-directory', 'vm-joined-to-active-directory', 'vm-nat-gateway']
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    # Validate terraform filescls
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive

    # Generate and show an execution plan
    #- name: Terraform Plan
    #  id: plan
    #  run: terraform plan -input=false -no-color

    #- name: Comment PR
    #  uses: actions/github-script@v3
    #  with:
    #    github-token: ${{ secrets.GITHUB_TOKEN }}
    #    script: |
    #      const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outputs.stdout }}\`
    #      #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outputs.stdout }}\`
    #      #### Terraform Plan üìñ\`${{ steps.plan.outputs.stdout }}\``;
    #      github.issues.createComment({
    #        issue_number: context.issue.number,
    #        owner: context.repo.owner,
    #        repo: context.repo.repo,
    #        body: `## Terraform checks in directory '${{ matrix.working-directory }}'\n` + output
    #      })